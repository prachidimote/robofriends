{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAgBeA,EAdF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAE3B,OACC,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACE,6BAAKF,IACL,4BAAIC,WCeKK,EArBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,8BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACJ,cAAC,EAAD,CAEGR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKHC,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAChC,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCyCFI,G,wDA1Cb,aAAc,IAAD,8BACd,gBAgBDC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAhB7C,EAAKC,MAAQ,CACXhB,OAAQ,GACRK,YAAa,IAJD,E,qDASf,WAAoB,IAAD,OAClBY,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACb,OAAOqB,S,oBAUvC,WACC,MAA8BC,KAAKN,MAA5BhB,EAAP,EAAOA,OAAQK,EAAf,EAAeA,YACTkB,EAAiBvB,EAAOwB,QAAO,SAAAC,GAC/B,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAStB,EAAYqB,kBAE1D,OAAQ1B,EAAO4B,OAGP,sBAAKhC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKX,iBAC9B,iCACE,cAAC,EAAD,CAAUX,OAAQuB,SAN9B,6C,GA7BgBM,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.13c967cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n\t\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t  <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t  <div>\r\n\t\t    <h2>{name}</h2>\r\n\t\t    <p>{email}</p>\r\n\t\t   </div>\r\n\t\t</div>\r\n\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t\treturn (\r\n\t\t  <div>\r\n\t\t    {\r\n            robots.map((user,i)=>{\r\n              return(\r\n\t\t        <Card \r\n\t\t           key={i} \r\n\t\t           id={robots[i].id} \r\n\t\t           name={robots[i].name} \r\n\t\t           email={robots[i].email}\r\n\t\t           />\r\n\t            );\r\n          })\r\n        }\r\n\t\r\n      </div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n\treturn(\r\n\t  <div className='pa2'>\r\n\t    <input\r\n\t      className='pa3 ba b--green bg-lightest-blue' \r\n\t      type='search'\r\n\t      placeholder='search robots'\r\n\t      onChange={searchChange}\r\n\t      />\r\n\t  </div>\r\n\r\n\t);\r\n}\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\n//import scroll from '../components/scroll';\r\n//import ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n\tsuper()\r\n\tthis.state = {\r\n\t  robots: [],\r\n\t  searchfield: ''\r\n\t}\r\n\t\r\n}\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(users => {this.setState({robots:users})});\r\n\t\r\n    \r\n}\r\n\r\nonSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value })\r\n   \r\n }\r\n\r\nrender(){\r\n\tconst {robots, searchfield} = this.state;\r\n\tconst filteredRobots = robots.filter(robot=>{\r\n       return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n})\r\n\t\treturn !robots.length?\r\n\t\t<h1>Loading</h1>:\r\n\t(\r\n          <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <scroll>\r\n              <CardList robots={filteredRobots}/>\r\n            </scroll>\r\n          </div>\r\n\t);\r\n}\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n//import './App.css';\n\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}